set nocompatible
set encoding=utf-8
set nobackup
set nowritebackup
set noswapfile

syntax enable

call plug#begin('~/.vim/plugged')

" UI
Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Project
Plug 'junegunn/fzf',                      { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/ctags.vim'
Plug 'haya14busa/incsearch.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'dbakker/vim-projectroot'

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'jpalardy/vim-slime'
Plug 'wincent/terminus'

" Editing
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'editorconfig/editorconfig-vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'christoomey/vim-sort-motion'
Plug 'tpope/vim-unimpaired'
Plug 'jeffkreeftmeijer/vim-numbertoggle'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Autocomplete
Plug 'Shougo/deoplete.nvim'


Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'wokalski/autocomplete-flow'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Linting
Plug 'nvie/vim-flake8'
Plug 'w0rp/ale'

" CSS
Plug 'ap/vim-css-color'
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }

" HTML
Plug 'othree/html5.vim',                  { 'for': 'html' }
Plug 'mattn/emmet-vim', { 'for': 'html' }
Plug 'Shougo/context_filetype.vim'
Plug 'Valloric/MatchTagAlways'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'ternjs/tern_for_vim', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'HerringtonDarkholme/yats.vim'
Plug 'jparise/vim-graphql'

" Python
Plug 'davidhalter/jedi-vim',  { 'for': 'python' }
Plug 'zchee/deoplete-jedi',  { 'for': 'python' }

" Markdown
Plug 'reedes/vim-pencil'
Plug 'junegunn/goyo.vim'
Plug 'godlygeek/tabular',                 { 'for': 'markdown' }
Plug 'plasticboy/vim-markdown',           { 'for': 'markdown' }

" Ruby
Plug 'tpope/vim-endwise'
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails'
Plug 'fishbullet/deoplete-ruby', { 'for': 'ruby' }

" Misc
Plug 'mbbill/undotree'
Plug 'sheerun/vim-polyglot'
Plug 'metakirby5/codi.vim'
Plug 'tpope/vim-dispatch'
Plug 'janko-m/vim-test'

call plug#end()

inoremap jk <Esc>
nmap j gj
nmap k gk
nmap <C-e> :e#<CR>

let mapleader=","
noremap \ ,

nnoremap <leader>i mmgg=G`m<CR>
nnoremap <leader>w :FixWhitespace<CR>
nnoremap <leader>u :UndotreeToggle<CR>
nnoremap <leader>f :ALEFix<CR>

nmap <Leader>a :Ag<CR>
nmap ; :Buffers<CR>

noremap <Leader>n :NERDTreeToggle<cr>
noremap <leader>s :NERDTreeFind<cr>
noremap <leader>i gg=G''
noremap <leader>t :TagbarToggle<cr>
noremap <leader>l :set invrelativenumber<CR>

let NERDTreeIgnore = [
      \'^node_modules[[dir]]'
      \]

set shell=zsh
set autoindent
set autoread
set backspace=indent,eol,start
set clipboard=unnamed
set complete-=i
set copyindent
set cursorline
set expandtab
set gdefault
set lazyredraw
set matchtime=2
set notitle
set nowrap
set nrformats-=octal
set number
set relativenumber
set ruler
set scrolloff=4
set secure
set showcmd
set showmatch
set smarttab
set splitbelow
set splitright
set ttimeout
set ttimeoutlen=0
set ttimeoutlen=1000
set wildmenu
set tabstop=2
set shiftwidth=2
set shiftround
set hidden
set noshowmode

" better search
set incsearch                   " incremental searching
set hlsearch                    " highlight matches
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Autocomplete
let g:deoplete#enable_at_startup = 1
let deoplete#auto_complete_start_length = 1

let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
      \ 'tern#Complete'
      \]


set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'flow', 'ternjs']
let g:deoplete#sources#ternjs#types = 1
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

autocmd FileType javascript nnoremap <S-k> :TernDoc<CR>
let g:tern_show_argument_hints = 'on_move'

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags

augroup VimCSS3Syntax
  autocmd!

  autocmd FileType css setlocal iskeyword+=-
augroup END


autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

let g:UltiSnipsExpandTrigger="<C-k>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

let g:SuperTabClosePreviewOnPopupClose = 0

" Linting
"let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
      \   'python': ['mypy', 'pylint'],
      \   'javascript': ['eslint', 'flow'],
      \   'css': ['stylelint'],
      \   'scss': ['stylelint'],
      \   'glsl': ['glslang'],
      \   'html': ['htmlhint'],
      \   'json': ['jsonlint'],
      \   'yaml': ['yamllint'],
      \   'ruby': ['rubocop'],
      \   'sql': ['sqlint'],
      \   'dockerfile': ['hadolint'],
      \   'markdown': ['mdl', 'proselint'],
      \   'c': ['clang'],
      \   'bash': ['shellcheck']
      \}

let g:ale_fixers = {
      \   'python': ['yapf'],
      \   'javascript': ['eslint'],
      \   'scss': ['prettier'],
      \   'css': ['stylelint'],
      \   'ruby': ['rubocop'],
      \   'html': ['tidy'],
      \   'json': ['prettier']
      \}

let g:ale_sign_column_always = 1
let g:ale_sign_error = '-'
let g:ale_sign_warning = '>'

nmap ]l :ALENextWrap<CR>
nmap [l :ALEPreviousWrap<CR>


" Slime
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
let g:slime_python_ipython = 1
let g:slime_default_config = {"socket_name": "default", "target_pane": "%1"}

" Git
highlight clear SignColumn
highlight link SignColumn Ignore

let g:gitgutter_sign_added = '∙'
let g:gitgutter_sign_modified = '∙'
let g:gitgutter_sign_removed = '∙'
let g:gitgutter_sign_modified_removed = '∙'

" Grepping
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Markdown
let g:vim_markdown_frontmatter = 1
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,md,text call pencil#init({'wrap': 'soft'})
augroup END



" Testing
let test#strategy = "dispatch"
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g

" UI
let base16colorspace=256
colorscheme base16-default-dark
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h11

" popup colors
if has ('gui_running')
  highlight Pmenu guibg=#cccccc gui=bold
endif
set t_Co=256
set background=dark

" better display for :set list
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
set laststatus=2

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =


" powerline
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_skip_empty_sections = 1


"" Allow bracketed paste mode.
if &term =~ "xterm.*"
  let &t_ti = &t_ti . "\e[?2004h"
  let &t_te = "\e[?2004l" . &t_te
  function XTermPasteBegin(ret)
    set pastetoggle=<Esc>[201~
    set paste
    return a:ret
  endfunction
  map <expr> <Esc>[200~ XTermPasteBegin("i")
  imap <expr> <Esc>[200~ XTermPasteBegin("")
  vmap <expr> <Esc>[200~ XTermPasteBegin("c")
  cmap <Esc>[200~ <nop>
  cmap <Esc>[201~ <nop>
endif

" Goyo
function! s:goyo_enter()
  if exists('$TMUX')
    silent !tmux set status off
  endif
endfunction

function! s:goyo_leave()
  if exists('$TMUX')
    silent !tmux set status on
  endif
endfunction

autocmd User GoyoEnter nested call <SID>goyo_enter()
autocmd User GoyoLeave nested call <SID>goyo_leave()

" FZF swag from https://github.com/alexlafroscia/dotfiles/blob/master/nvim/plugin/fzf.vim
" Insert mode remaps
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)

" Search for tasks across the current project
nnoremap <C-p> :Files<cr>

" Custom colors to match theme
let g:fzf_colors = {
      \   'bg+':     ['bg', 'Normal'],
      \   'fg+':     ['fg', 'Statement'],
      \   'hl':      ['fg', 'Underlined'],
      \   'hl+':     ['fg', 'Underlined'],
      \   'info':    ['fg', 'MatchParen'],
      \   'pointer': ['fg', 'Special'],
      \   'prompt':  ['fg', 'Normal'],
      \   'marker':  ['fg', 'MatchParen']
      \ }

" Python
au BufNewFile,BufRead *.py,*.m
      \ set tabstop=4 |
      \ set softtabstop=4 |
      \ set shiftwidth=4 |
      \ set textwidth=119 |
      \ set expandtab |
      \ set fileformat=unix |
      \ set colorcolumn=120 |
      \ highlight ColorColumn ctermbg=8

" General Indent
au BufNewFile,BufRead *.rb,*.js,*.html,*.css,*.sh,*.zsh,*.yml,*.hs,*.scss
      \ set tabstop=2 |
      \ set softtabstop=2 |
      \ set shiftwidth=2

au BufRead,BufNewFile .eslintrc,.jscsrc,.jshintrc,.babelrc, .stylelintrc set ft=json
